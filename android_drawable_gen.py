import os
import re
import sys

CLASS_NAME_DEFAULT = "DrawableGen"
SOURCE_CODE_FOLDER_PATH = "app/src/main/java/"
RES_FOLDER_PATH = "app/src/main/res/"
PACKAGE_GEN_OUTPUT = "gen"

CONTENT_FILE_TEMPLATE = """
/// GENERATED CODE - DO NOT MODIFY BY HAND
/// *****************************************************
///  Drawable  assets gen file
///  Generated by android_drawable_gen.py
/// *****************************************************
package [PACKAGE_NAME].gen

import android.content.Context
import android.graphics.drawable.Drawable
import androidx.core.content.ContextCompat
import [PACKAGE_NAME].R

object [CLASS_NAME]Helper {
    fun getResDrawable(fileName: String): Int? = [CLASS_NAME].entries
        .firstOrNull { it.fileName == fileName }?.res
    
    fun getDrawable(context: Context, name: String): Drawable? {
        val resourceId = getResDrawable(name) ?: return null
        return ContextCompat.getDrawable(context, resourceId)
    }
}

enum class [CLASS_NAME](val fileName: String, val res: Int) {
[ENUM_LIST]
}
        """

def get_all_file_paths(folder_path):
    """
    Retrieves a list of all file paths within a given folder and its subfolders.

    Args:
        folder_path (str): The path to the folder.

    Returns:
        list: A list of strings, where each string is the absolute path to a file.
              Returns an empty list if the folder_path is invalid or not a directory.
    """
    file_paths = []
    # Check if the provided path is a valid directory
    if not os.path.isdir(folder_path):
        print(f"Error: '{folder_path}' is not a valid directory.")
        return file_paths

    # Walk through the directory tree
    for root, directories, files in os.walk(folder_path):
        for filename in files:
            # Construct the full filepath by joining the root directory and filename
            if filename != ".DS_Store":
                filepath = os.path.join(root, filename)
                file_paths.append(filepath)
    return file_paths

def get_uppercase_name(filename):
  """
  Extracts the name from a filename (without extension) and converts it to uppercase.

  Args:
    filename: The name of the file (string).

  Returns:
    The uppercase name without the extension (string).
  """
  name_without_extension, _ = os.path.splitext(filename)
  uppercase_name = name_without_extension.replace(" ", "_").replace("-", "_").upper()
  return uppercase_name

def convert_to_capitalized_class_name(input_string):
  """
  Converts a string to Capitalized Case suitable for class names.

  It handles various separators like underscores, spaces, and slashes.

  Args:
    input_string: The input string to convert.

  Returns:
    The string in Capitalized Case.
  """
  # Remove any trailing slashes
  cleaned_string = input_string.rstrip('/')
  # Split the string by non-alphanumeric characters (underscores, spaces, slashes, etc.)
  words = re.split(r'[^a-zA-Z0-9]+', cleaned_string)
  # Capitalize the first letter of each word and join them
  capitalized_words = [word[0].upper() + word[1:] for word in words]
  return "".join(capitalized_words)
       
def write_file(filename, content):
  """
  Writes the given content string to a file with the specified filename.

  Args:
    filename: The name of the file to create or overwrite (string).
    content: The string content to write to the file.
  """
  try:
    with open(filename, 'w') as file:
      file.write(content)
    print(f"Successfully wrote content to '{filename}'")
  except Exception as e:
    print(f"An error occurred while writing to '{filename}': {e}")

def create_child_folder(parent_path, child_folder_name):
  """Creates a child folder within a specified parent folder.

  Args:
    parent_path: The path to the parent directory.
    child_folder_name: The name of the child folder to create.
  """
  child_path = os.path.join(parent_path, child_folder_name)
  try:
    os.makedirs(child_path, exist_ok=True)
    print(f"Successfully created folder: {child_path}")
  except OSError as e:
    print(f"Error creating folder {child_path}: {e}")

def create_list_item_enum(all_files_drawable): 
    list_drawable = set()
    if all_files_drawable:
        for file_path in all_files_drawable:
            filename = os.path.splitext(os.path.basename(file_path))[0]
            list_drawable.add(filename)
        list_enum_item = list(list_drawable)
        list_enum_item.sort()
        enum_list = [f"    {get_uppercase_name(item)}(\"{item}\", R.drawable.{item})" for item in list_enum_item]
        return enum_list
    else: 
      return []
   
def gen_drawable(package_name_app): 
    output_folder_path = SOURCE_CODE_FOLDER_PATH + package_name_app.replace(".", "/")
    create_child_folder(output_folder_path, PACKAGE_GEN_OUTPUT)
    default_output_folder = output_folder_path + f"/{PACKAGE_GEN_OUTPUT}/"

    # Get all file paths
    all_files = get_all_file_paths(RES_FOLDER_PATH)
    all_files_drawable = [item for item in all_files if "/drawable" in item]
    enum_list = create_list_item_enum(all_files_drawable)
    enum_list_str = ",\n".join(enum_list)
    source_code = CONTENT_FILE_TEMPLATE.replace("[PACKAGE_NAME]", package_name_app)
    source_code = source_code.replace("[ENUM_LIST]", enum_list_str)
    source_code = source_code.replace("[CLASS_NAME]", CLASS_NAME_DEFAULT)
    write_file(default_output_folder + CLASS_NAME_DEFAULT + ".kt", source_code)
   
if __name__ == "__main__":

    package_name_app = ""

    if len(sys.argv) > 0:
        package_name_app = sys.argv[1].strip()
    else:
        package_name_app = input("Enter the package name: ").strip()
    gen_drawable(package_name_app)
    
